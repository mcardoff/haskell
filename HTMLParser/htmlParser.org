#+TITLE: Notes for HTML Parser
#+AUTHOR: Michael Cardiff
#+DATE: July 2020

* What do we need to Parse?
  HTML is made up of elements, their attributes, and literal text.
** What is an Element?
  - Contains an element name
  - Contains the content of the element
    - May be other elements, attributes of the element, or plain text
** What is an Attribute?
   - Contains the name of the attribute
     - Just text
   - Contains the value of the attribute
     - String literal, surrounded by quotes
** What is Text?
   - Contains just the literal text, which is anything that is not
     already an element or attribute

* What methods can we use
  We can use monadic parsing, which is better for visual purposes, but
  it would be nice to applicatively parse
  Something that would be nice would be to use something like:

  #+BEGIN_SRC haskell
  data HTML = Element String [HTML]
            | Attribute String String
            | Text String
  pElement :: Parser HTML
  pElement = (\x y z -> Element x (y++z)) <$> a <*> b <*> c
  #+END_SRC
  
  This structure allows for a more compact version of the previous,
  borderline imperative design of the parser. However, a b and c would
  be difficult to define. Due to the way the HTML is defined, we need
  a, b, and c to be:

  - a :: Parser String
  - b :: Parser [HTML]
  - c :: Parser [HTML]

  More specifically, we need a to parse the name of the element, b to
  parse its attributes (and the end of the opening tag) and then c to
  parse the rest. Hopefully this could mean that they would be:
  
  - a = token
    - Parser String which parses letters separated by ws
  - b = many attribP <* charP '>'
    - Parser HTML which gets the attributes then the close tag, may have to use sequence
  - c = many $ htmlElem <|> textP
    - Parser [HTML], will either get the text from an element, or will get the next elem

** Better Ideas?
   The current applicative parser, which is written in the following way:
   #+BEGIN_SRC haskell
   elemP :: Parser HTML
   elemP = ((\x y z w -> Element x $ y++z++w)
        <$> (openTag)
        <*> (many attribP <* charP '>')
        <*> (many textP)
        <*> (many thing)) <* manyClose
   #+END_SRC
   The problem is that it does not parse htmlDoc4, particularly
   failing at the point where it goes "<p> This is ..."
   a better way to parse this would to use the following structure:

   #+BEGIN_SRC haskell
   betweenP (stringP openTag) (stringP closeTag "openName") moreHTMLParser
   #+END_SRC
   
   This does not make sense in the way we are doing it, as it requires
   first parsing the tag, piping that into the closeTag, which would
   require knowing the name before execution.

   This whole method is not practical, and it only really makes sense
   if we were to use Monads, as they allow for binding of variables to operations

*** TODO Find a way to use applicatives to ensure proper html formatting
